TicTacToeTester.java
Solution Code
import java.util.Scanner;

public class TicTacToeTester
{
    public static void main(String[] args)
    {
        Scanner input = new Scanner(System.in);
        TicTacToe board = new TicTacToe();
        System.out.println("Welcome to Tic Tac Toe!");
        while(!board.checkWin() && board.getTurn() < 9)
        {
            board.printBoard();
            System.out.println("Enter your Row Pick:" );
            int row = input.nextInt();
            System.out.println("Enter your Col Pick:" );
            int col = input.nextInt();
            if(board.pickLocation(row, col))
            {
                board.takeTurn(row, col);
            }
            else
            {
                System.out.println("That space is taken, or you entered an invalid row/col");
            }
            
        }
        board.printBoard();
        if(!board.checkWin())
        {
            System.out.println("Game ends in a tie!");
        }
        else if (board.getTurn()%2 == 0)
        {
            System.out.println("O Wins!");
        }
        else
        {
            System.out.println("X Wins!");
        }
    }
}






TicTacToe.java
Solution Code
public class TicTacToe
{
    private String[][] board = new String[3][3];
    private int turn = 0;
    
    public TicTacToe()
    {
        for(int row = 0; row < board.length; row++)
        {
            for(int col = 0; col< board[row].length; col++)
            {
                board[row][col] = "-";
            }
        }
    }
    
    public int getTurn()
    {
        return turn;
    }
    
    public void printBoard()
    {
        System.out.println("  0 1 2");
        int row = 0;
        for(String[] array:board)
        {
            System.out.print(row+ " ");
            for(String item: array)
            {
                System.out.print(item + " ");
                
            }
            row++;
            System.out.println();
        }
    }
    
    public void takeTurn(int row, int col)
    {
        if(turn %2 == 0)
        {
            board[row][col] = "X";
        }
        else
        {
            board[row][col] = "O";
        }
        turn++;
    }
    
    public boolean pickLocation(int row, int col)
    {
        if(row < 3 && col < 3)
        {
            if(board[row][col] == "-")
            {
                return true;
            }
        }
        return false;
    }
    
    public boolean checkRow()
    {
        boolean win = false;
        for (int i = 0; i < board.length; i++)
        {
            if (!board[i][0].equals("-"))
            {
                 if (board[i][0].equals(board[i][1]) && board[i][0].equals(board[i][2]))
                 {
                    win = true;
                 }
            }
        }
        return win;
    }
    
    public boolean checkWin()
    {
        return checkCol() || checkRow() || checkDiag();
    }
    
    public boolean checkCol()
    {
        boolean win = false;
        for (int i = 0; i < board[0].length; i++)
        {
            if (!board[0][i].equals("-"))
            {
                 if (board[0][i].equals(board[1][i]) && board[0][i].equals(board[2][i]))
                 {
                    win = true;
                 }
            }
        }
        return win;
    }
    
    public boolean checkTurn()
    {
        return turn < 9;
    }
    
    public boolean checkDiag()
    {
        boolean win = false;
        
        if (!board[0][0].equals("-")) {
            if (board[0][0].equals(board[1][1]) && board[0][0].equals(board[2][2]))
                win = true; 
        }
        
        if (!board[0][2].equals("-")) {
            if (board[0][2].equals(board[1][1]) && board[0][2].equals(board[2][0]))
                win = true; 
        }
        
        return win;
    }
}
