AirlineTicket.java
Solution Code
public class AirlineTicket
{
    private String[] seats = {"A","B","C","D","E","F"};
    private String name;
    private String seat;
    private int boardingGroup;
    private int row;
    
    public AirlineTicket(String name, String seat, int boardingGroup, int row)
    {
        this.name = name;
        if(isValidSeat(seat))
        {
            this.seat = seat;
        }
        this.boardingGroup = boardingGroup;
        this.row = row;
        
    }
    
    private boolean isValidSeat(String seat)
    {
        boolean isValidSeat = false;
        for(String elem: seats)
        {
            if(seat.equals(elem))
            {
                isValidSeat = true;
            }
        }
        return isValidSeat;
    }
    
    public String getSeat()
    {
        return this.seat;
    }
    
    public String getName()
    {
        return this.name;
    }
    
    public int getBoardingGroup()
    {
        return this.boardingGroup;
    }
    
    public int getRow()
    {
        return this.row;
    }
    
    public String toString()
    {
        return name + " Seat: " +seat + " Row: " + row + " Boarding Group: " + boardingGroup;
    }
}







AirlineTicketTester.java
Solution Code
import java.util.ArrayList;

public class AirlineTicketTester
{
    public static void main(String[] args)
    {
        ArrayList<AirlineTicket> tickets = new ArrayList<AirlineTicket>();
        //This creates a randomized list of passengers
        addPassengers(tickets);
        for(AirlineTicket elem: tickets)
        {
            System.out.println(elem);
        }
       //This creates a TicketOrganizer object
        TicketOrganizer ticketOrganizer = new TicketOrganizer(tickets);
        
        //These are the methods of the ticketOrganizer in action
        System.out.println("\nPassengers Ordered by Boarding Group:");
        ticketOrganizer.printPassengersByBoardingGroup();
        System.out.println("\nPassengers in line who can board together:");
        ticketOrganizer.canBoardTogether();
    }
    
    //Do not touch this method! It is adding random passengers to the AirlineTicket array
    public static void addPassengers(ArrayList<AirlineTicket> tickets)
    {
        String[] names = {"Xander", "Siena", "Ella-Louise", "Dawn", "Sharon", "Ayla", "Delores", "Adrian", "Candice", "Everly", "Nevaeh", "Patricia", "Saba", "Austin", "Deanna"};
        String[] seats = {"A","B","C","D","E","F"};
        for(int index = 0; index< 15; index++)
        {
            int random = (int)(Math.random() * 5);
            AirlineTicket ticket = new AirlineTicket(names[index], seats[random], ((int)(Math.random()*5)+1), ((int)(Math.random()*8)+1));
            tickets.add(ticket);
        }
    }
    
}








TicketOrganizer.java
Solution Code
import java.util.ArrayList;

public class TicketOrganizer
{
    private ArrayList<AirlineTicket> tickets;
    
    public TicketOrganizer(ArrayList<AirlineTicket> tickets)
    {
        this.tickets = tickets;
    }
    
    public void printPassengersByBoardingGroup()
    {
        for(int boardingGroup = 1; boardingGroup < 6 ; boardingGroup++)
        {
            System.out.println("Boarding Group "+ boardingGroup + ":");
            for(int index = 0; index< tickets.size(); index++)
            {
                if(tickets.get(index).getBoardingGroup() == boardingGroup)
                {
                    System.out.println(tickets.get(index).getName());
                }
        }
        }
    }
    
    public void canBoardTogether()
    {
        boolean canBoard = false;
        for(int index = 0; index< tickets.size()-1; index++)
        {
                if(tickets.get(index).getRow() == tickets.get(index+1).getRow())
                {
                    if(tickets.get(index).getBoardingGroup() == tickets.get(index+ 1).getBoardingGroup())
                    {
                        System.out.println(tickets.get(index).getName() + " can board with " + tickets.get(index+ 1).getName() +".");
                        canBoard = true;
                    }
                }
        } 
        if(!canBoard)
        {
            System.out.println("There are no passengers with the same row and boarding group.");
        }
    }
    
    public ArrayList<AirlineTicket> getTickets()
    {
        return tickets;
    }
    
}


